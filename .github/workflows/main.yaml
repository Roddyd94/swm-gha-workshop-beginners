name: 'SWM GitHub Actions Basic'

# Actions가 동작할 트리거
on: 'push'
# Actions가 동작할 트리거 목록
# on: ['push', 'pull_request', 'issues']
# Actions가 동작할 트리거 dictionary
# on:
#   push:
#     branches:
#       - main
#       - 'feature/*'
#     paths:
#       - 'src/*'
#       - 'test/*'
#   pull_request:
#     branches:
#       - main

# global level env
# env:
#   GLOBAL_LEVEL: 'GLOBAL ENV VALUE'

# 트리거에 따른 동작
# dictionary로 작성 시 무엇이 먼저 실행 될지 알지 못 함
jobs:
  build-test:
    name: 'build & test'
    runs-on: 'ubuntu-latest'
    steps:
    # actions를 사용하기 위한 필수적인 코드 다운받기
    - name: Checkout codes
      uses: actions/checkout@v3

    - name: Send a message to Webex Space
      shell: bash
      run: |
        echo "Hello World"
        curl -X POST https://webexapis.com/v1/messages \
          -H 'Authorization: Bearer ${{ secrets.WEBEX_TOKEN }}' \
          -H 'Content-Type: application/json' \
          -d '{
            "roomId": "${{ secrets.WEBEX_ROOM_ID }}",
            "text": "메시지입니다. - FROM GitHub Actions"
          }'
    - name: Post Message to Webex Room
      uses: chrivand/action-webex-js@main
      env:
        WEBEX_TOKEN: ${{ secrets.WEBEX_TOKEN }}
        WEBEX_ROOM_ID: ${{ secrets.WEBEX_ROOM_ID }}
        MARKDOWN_MESSAGE: "**Hello, world! You just ran an action from ${{ github.repository }}.**"
    - name: Send message from custom action to Webex
      uses: '@main/.github/actions'
      with:
        webexToken: ${{ secrets.WEBEX_TOKEN }}
        webexRoomId: ${{ secrets.WEBEX_ROOM_ID }}
        bodyText: "메시지입니다. - FROM GitHub Actions"
        bodyMarkdown: "**Hello, world! You just ran an action from ${{ github.repository }}.**"
#   deploy-dev:
#     name: 'Deploy to Dev'
#     needs:
#       - build-test
#     runs-on: 'ubuntu-latest'
#     steps:
#     - name: Say Hello World 1
#       shell: bash
#       run: |
#         echo "Hello World"
#   deploy-staging-1:
#     name: 'Deploy to Staging'
#     needs:
#       - deploy-dev
#     runs-on: 'ubuntu-latest'
#     steps:
#     - name: Say Hello World 1
#       shell: bash
#       run: |
#         echo "Hello World"
#   deploy-staging-2:
#     name: 'Deploy to Staging'
#     needs:
#       - deploy-dev
#     runs-on: 'ubuntu-latest'
#     steps:
#     - name: Say Hello World 1
#       shell: bash
#       run: |
#         echo "Hello World"
#   deploy-prod:
#     name: 'Deploy to Production'
#     needs:
#       - deploy-staging-1
#       - deploy-staging-2
#     runs-on: 'ubuntu-latest'
#     steps:
#     - name: Say Hello World 1
#       shell: bash
#       run: |
#         echo "Hello World"

  # first-job:
  #   name: 'First Job'

  #   strategy:
  #     matrix:
  #       os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
  #       nodejs: ['16', '18']

  #   runs-on: ${{ matrix.os }}
    # runs-on: ubuntu-latest

    # job level env
    # env:
    #   JOB_LEVEL_1: 'JOB LEVEL VALUE 1'

    # steps:
    # - name: Say Hello World 1 - ${{ matrix.os }}
    # - name: Say Hello World 1
      # id: helloworld1
      # shell: bash
      # step level env
      # env:
      #   STEP_LEVEL_1: 'STEP LEVEL VALUE 1'
      # run: |
      #   echo "OS: ${{ matrix.os }}"
      #   echo "nodejs version: ${{ matrix.nodejs }}"
      # run: |
      #   echo "Hello World from step 1"
      #   randomValue="swm$(echo $RANDOM)"
      #   echo "::add-mask::$randomValue"
      #   echo "STEP_VALUE=$randomValue" >> $GITHUB_OUTPUT
      # run: |
      #   echo "Hello World from step 1"
      #   randomValue="swm$(echo $RANDOM)"
      #   echo "STEP_VALUE=$randomValue" >> $GITHUB_ENV
      # run: |
      #   echo "Hello World from step 1"
      #   echo "GLOBAL: $GLOBAL_LEVEL"
      #   echo "JOB 1: ${{ env.JOB_LEVEL_1 }}"
      #   echo "JOB 2: ${{ env.JOB_LEVEL_2 }}"
      #   echo "STEP 1: ${{ env.STEP_LEVEL_1 }}"
      #   echo "STEP 2: ${{ env.STEP_LEVEL_2 }}"
      #   echo "STEP 3: ${{ env.STEP_LEVEL_3 }}"
      #   echo "STEP 4: ${{ env.STEP_LEVEL_4 }}"
        
    # - name: Say Hello World 2 - ${{ matrix.os }}
      # 이전 단계가 실패할 경우에
      # if: fail() # success()가 기본
      # if: matrix.os == 'windows-latest' && matrix.nodejs == '16'
      # if: matrix.os == 'windows-latest'
      # shell: bash
      # run: |
      #   echo "OS: ${{ matrix.os }}"
      #   echo "nodejs version: ${{ matrix.nodejs }}"
    # - name: Say Hello World 2
      # shell: pwsh
      # env:
      #   STEP_LEVEL_2: 'STEP LEVEL VALUE 2'
      # run: |
      #   echo "Hello World from step 2"
      #   echo "STEP_VALUE: ${{ steps.helloworld1.outputs.STEP_VALUE }}"
      #   echo "API_KEY: ${{ secrets.API_KEY }}"
      # run: |
      #   echo "Hello World from step 2"
      #   echo "STEP_VALUE: ${{ env.STEP_VALUE }}"
      # run: |
      #   echo "Hello World from step 2"
      #   echo "GLOBAL: $env:GLOBAL_LEVEL"
      #   echo "JOB 1: ${{ env.JOB_LEVEL_1 }}"
      #   echo "JOB 2: ${{ env.JOB_LEVEL_2 }}"
      #   echo "STEP 1: ${{ env.STEP_LEVEL_1 }}"
      #   echo "STEP 2: ${{ env.STEP_LEVEL_2 }}"
      #   echo "STEP 3: ${{ env.STEP_LEVEL_3 }}"
      #   echo "STEP 4: ${{ env.STEP_LEVEL_4 }}"

  # second-job:
  #   name: 'Second Job'

  #   runs-on: ubuntu-latest

  #   env:
  #     JOB_LEVEL_2: 'JOB LEVEL VALUE 2'

  #   steps:
  #   - name: Say Hello World 1
  #     shell: bash
  #     env:
  #       STEP_LEVEL_3: 'STEP LEVEL VALUE 3'
  #     run: |
  #       echo "Hello World from step 1"
  #       echo "GLOBAL: $GLOBAL_LEVEL"
  #       echo "JOB 1: ${{ env.JOB_LEVEL_1 }}"
  #       echo "JOB 2: ${{ env.JOB_LEVEL_2 }}"
  #       echo "STEP 1: ${{ env.STEP_LEVEL_1 }}"
  #       echo "STEP 2: ${{ env.STEP_LEVEL_2 }}"
  #       echo "STEP 3: ${{ env.STEP_LEVEL_3 }}"
  #       echo "STEP 4: ${{ env.STEP_LEVEL_4 }}"

  #   - name: Say Hello World 2
  #     shell: pwsh
  #     env:
  #       STEP_LEVEL_4: 'STEP LEVEL VALUE 4'
  #     run: |
  #       echo "Hello World from step 2"
  #       echo "GLOBAL: $env:GLOBAL_LEVEL"
  #       echo "JOB 1: ${{ env.JOB_LEVEL_1 }}"
  #       echo "JOB 2: ${{ env.JOB_LEVEL_2 }}"
  #       echo "STEP 1: ${{ env.STEP_LEVEL_1 }}"
  #       echo "STEP 2: ${{ env.STEP_LEVEL_2 }}"
  #       echo "STEP 3: ${{ env.STEP_LEVEL_3 }}"
  #       echo "STEP 4: ${{ env.STEP_LEVEL_4 }}"

# 환경 변수 지정
# bash의 문법
# echo "$ENV_VARIABLE_NAME"
# powershell의 문법
# echo "$env:ENV_VARIABLE_NAME"
# github Actions의 문법
# echo "${{ env.ENV_VARIABLE_NAME }}"
# github Actions의 문법
# ENV 변수 동적 할당, Job-level Scope
# variableName="swm$(echo $RANDOM)"
# echo "ENV_VARIABLE_NAME=$variableName" >> $GITHUB_ENV

# 변수 지정
# github Actions의 문법
# ENV 변수 동적 할당, Job-level Scope
# variableName="swm$(echo $RANDOM)"
# echo "VARIABLE_NAME=$variableName" >> $GITHUB_OUTPUT
# echo "${{ steps.stepIdName.outputs.VARIABLE_NAME }}"

# 민감 정보 마스킹
# echo "::add-mask::$variableName"

# repository secret 변수
# setting > Security> "Secrets and variables" > Actions
# echo "${{ secrets.ENV_NAME }}""

# 서로 다른 OS에 빌드하는 상황
# 또는 서로 다른 버전에 패키징하는 상황
# 

# 특정 OS 또는 버전에서만 특정 패키지가 필요한 경우
#

# 순서대로 배포해야 하는 경우
# 

# 메세지 봇 연동
# 

# marketplace에서 가져다 쓰기
# 

# marketplace에 Action 만들어 올리기
# docker 컨테이너로 만들기
# JS로 만들기
# skills.github.com
# hello-github-actions
