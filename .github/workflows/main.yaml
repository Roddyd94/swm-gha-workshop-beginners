name: 'SWM GitHub Actions Basic'

# Actions가 동작할 트리거
on: 'push'
# Actions가 동작할 트리거 목록
# on: ['push', 'pull_request', 'issues']
# Actions가 동작할 트리거 dictionary
# on:
#   push:
#     branches:
#       - main
#       - 'feature/*'
#     paths:
#       - 'src/*'
#       - 'test/*'
#   pull_request:
#     branches:
#       - main

# global level env
# env:
#   GLOBAL_LEVEL: 'GLOBAL ENV VALUE'

# 트리거에 따른 동작
# dictionary로 작성 시 무엇이 먼저 실행 될지 알지 못 함
jobs:
  first-job:
    name: 'First Job'

    runs-on: ubuntu-latest

    # job level env
    # env:
    #   JOB_LEVEL_1: 'JOB LEVEL VALUE 1'

    steps:
    - name: Say Hello World 1
      id: helloworld1
      shell: bash
      # step level env
      # env:
      #   STEP_LEVEL_1: 'STEP LEVEL VALUE 1'
      run: |
        echo "Hello World from step 1"
        randomValue="swm$(echo $RANDOM)"
        echo "STEP_VALUE=$randomValue" >> $GITHUB_OUTPUT
      # run: |
      #   echo "Hello World from step 1"
      #   randomValue="swm$(echo $RANDOM)"
      #   echo "STEP_VALUE=$randomValue" >> $GITHUB_ENV
      # run: |
      #   echo "Hello World from step 1"
      #   echo "GLOBAL: $GLOBAL_LEVEL"
      #   echo "JOB 1: ${{ env.JOB_LEVEL_1 }}"
      #   echo "JOB 2: ${{ env.JOB_LEVEL_2 }}"
      #   echo "STEP 1: ${{ env.STEP_LEVEL_1 }}"
      #   echo "STEP 2: ${{ env.STEP_LEVEL_2 }}"
      #   echo "STEP 3: ${{ env.STEP_LEVEL_3 }}"
      #   echo "STEP 4: ${{ env.STEP_LEVEL_4 }}"
        
    - name: Say Hello World 2
      shell: pwsh
      # env:
      #   STEP_LEVEL_2: 'STEP LEVEL VALUE 2'
      run: |
        echo "Hello World from step 2"
        echo "STEP_VALUE: ${{ env.helloworld1.outputs.STEP_VALUE }}"
      # run: |
      #   echo "Hello World from step 2"
      #   echo "STEP_VALUE: ${{ env.STEP_VALUE }}"
      # run: |
      #   echo "Hello World from step 2"
      #   echo "GLOBAL: $env:GLOBAL_LEVEL"
      #   echo "JOB 1: ${{ env.JOB_LEVEL_1 }}"
      #   echo "JOB 2: ${{ env.JOB_LEVEL_2 }}"
      #   echo "STEP 1: ${{ env.STEP_LEVEL_1 }}"
      #   echo "STEP 2: ${{ env.STEP_LEVEL_2 }}"
      #   echo "STEP 3: ${{ env.STEP_LEVEL_3 }}"
      #   echo "STEP 4: ${{ env.STEP_LEVEL_4 }}"

  # second-job:
  #   name: 'Second Job'

  #   runs-on: ubuntu-latest

  #   env:
  #     JOB_LEVEL_2: 'JOB LEVEL VALUE 2'

  #   steps:
  #   - name: Say Hello World 1
  #     shell: bash
  #     env:
  #       STEP_LEVEL_3: 'STEP LEVEL VALUE 3'
  #     run: |
  #       echo "Hello World from step 1"
  #       echo "GLOBAL: $GLOBAL_LEVEL"
  #       echo "JOB 1: ${{ env.JOB_LEVEL_1 }}"
  #       echo "JOB 2: ${{ env.JOB_LEVEL_2 }}"
  #       echo "STEP 1: ${{ env.STEP_LEVEL_1 }}"
  #       echo "STEP 2: ${{ env.STEP_LEVEL_2 }}"
  #       echo "STEP 3: ${{ env.STEP_LEVEL_3 }}"
  #       echo "STEP 4: ${{ env.STEP_LEVEL_4 }}"

  #   - name: Say Hello World 2
  #     shell: pwsh
  #     env:
  #       STEP_LEVEL_4: 'STEP LEVEL VALUE 4'
  #     run: |
  #       echo "Hello World from step 2"
  #       echo "GLOBAL: $env:GLOBAL_LEVEL"
  #       echo "JOB 1: ${{ env.JOB_LEVEL_1 }}"
  #       echo "JOB 2: ${{ env.JOB_LEVEL_2 }}"
  #       echo "STEP 1: ${{ env.STEP_LEVEL_1 }}"
  #       echo "STEP 2: ${{ env.STEP_LEVEL_2 }}"
  #       echo "STEP 3: ${{ env.STEP_LEVEL_3 }}"
  #       echo "STEP 4: ${{ env.STEP_LEVEL_4 }}"

# 환경 변수 지정
# bash의 문법
# echo "$ENV_VARIABLE_NAME"
# powershell의 문법
# echo "$env:ENV_VARIABLE_NAME"
# github Actions의 문법
# echo "${{ env.ENV_VARIABLE_NAME }}"
# github Actions의 문법
# ENV 변수 동적 할당, Job-level Scope
# echo "STEP_VALUE=$randomValue" >> $GITHUB_ENV
# github Actions의 문법
# ENV 변수 동적 할당, Job-level Scope
# echo "STEP_VALUE=$randomValue" >> $GITHUB_ENV